datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id         Int      @id @default(autoincrement())
  name       String?
  email      String   @unique
  password   String?
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())
  lastActive DateTime @default(now())

  roles                 Roles[]          @relation("UserRoles")
  Session               Session[]
  TavernMessages        TavernMessages[]
  Characters            Character[]
  Replies               CampaignReply[]
  campaignsAsGameMaster Campaign[]       @relation("CampaignsAsGameMaster")
  campaignsAsPlayer     Campaign[]       @relation("CampaignsAsPlayer")
}

model Roles {
  id            Int      @id @default(autoincrement())
  slug          String   @unique
  displayedName String
  permissions   String[]
  users         User[]   @relation("UserRoles")
}

model Session {
  id           Int      @id @default(autoincrement())
  expires      DateTime
  sessionToken String   @unique
  accessToken  String?
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
}

model Taverns {
  id          Int     @id @default(autoincrement())
  name        String
  description String?

  messages TavernMessages[]
}

model TavernMessages {
  id        Int      @id @default(autoincrement())
  tavern    Taverns  @relation(fields: [tavernId], references: [id])
  tavernId  Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  message   String
}

model Character {
  id         Int       @id @default(autoincrement())
  name       String
  age        Int
  class      String
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  campaign   Campaign? @relation(fields: [campaignId], references: [id])
  campaignId Int?
}

model Locations {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  name        String
  description String
  campaign    Campaign[]
  campaignId  Int
}

model Campaign {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  ended        Boolean  @default(false)
  name         String
  description  String
  images       String
  gameMaster   User     @relation("CampaignsAsGameMaster", fields: [gameMasterId], references: [id])
  gameMasterId Int

  place      Locations[]
  replies    CampaignReply[]
  players    User[]          @relation("CampaignsAsPlayer")
  characters Character[]
}

model CampaignReply {
  id         Int      @id @default(autoincrement())
  reply      String
  createdBy  User     @relation(fields: [userId], references: [id])
  userId     Int
  campaign   Campaign @relation(fields: [campaignId], references: [id])
  campaignId Int
  createdAt  DateTime @default(now())
}
